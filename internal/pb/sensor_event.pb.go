// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.4
// source: protos/sensor_event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnortTimestamp     string  `protobuf:"bytes,1,opt,name=snort_timestamp,json=snortTimestamp,proto3" json:"snort_timestamp,omitempty"`
	SnortBase64Data    *string `protobuf:"bytes,2,opt,name=snort_base64_data,json=snortBase64Data,proto3,oneof" json:"snort_base64_data,omitempty"`
	SnortClientBytes   *int64  `protobuf:"varint,3,opt,name=snort_client_bytes,json=snortClientBytes,proto3,oneof" json:"snort_client_bytes,omitempty"`
	SnortClientPkts    *int64  `protobuf:"varint,4,opt,name=snort_client_pkts,json=snortClientPkts,proto3,oneof" json:"snort_client_pkts,omitempty"`
	SnortDstAddress    *string `protobuf:"bytes,5,opt,name=snort_dst_address,json=snortDstAddress,proto3,oneof" json:"snort_dst_address,omitempty"`
	SnortDstPort       *int64  `protobuf:"varint,6,opt,name=snort_dst_port,json=snortDstPort,proto3,oneof" json:"snort_dst_port,omitempty"`
	SnortDstAp         *string `protobuf:"bytes,7,opt,name=snort_dst_ap,json=snortDstAp,proto3,oneof" json:"snort_dst_ap,omitempty"`
	SnortEthDst        *string `protobuf:"bytes,8,opt,name=snort_eth_dst,json=snortEthDst,proto3,oneof" json:"snort_eth_dst,omitempty"`
	SnortEthLen        *int64  `protobuf:"varint,9,opt,name=snort_eth_len,json=snortEthLen,proto3,oneof" json:"snort_eth_len,omitempty"`
	SnortEthSrc        *string `protobuf:"bytes,10,opt,name=snort_eth_src,json=snortEthSrc,proto3,oneof" json:"snort_eth_src,omitempty"`
	SnortEthType       *string `protobuf:"bytes,11,opt,name=snort_eth_type,json=snortEthType,proto3,oneof" json:"snort_eth_type,omitempty"`
	SnortFlowstartTime *int64  `protobuf:"varint,12,opt,name=snort_flowstart_time,json=snortFlowstartTime,proto3,oneof" json:"snort_flowstart_time,omitempty"`
	SnortGeneveVni     *int64  `protobuf:"varint,13,opt,name=snort_geneve_vni,json=snortGeneveVni,proto3,oneof" json:"snort_geneve_vni,omitempty"`
	SnortIcmpCode      *int64  `protobuf:"varint,14,opt,name=snort_icmp_code,json=snortIcmpCode,proto3,oneof" json:"snort_icmp_code,omitempty"`
	SnortIcmpId        *int64  `protobuf:"varint,15,opt,name=snort_icmp_id,json=snortIcmpId,proto3,oneof" json:"snort_icmp_id,omitempty"`
	SnortIcmpSeq       *int64  `protobuf:"varint,16,opt,name=snort_icmp_seq,json=snortIcmpSeq,proto3,oneof" json:"snort_icmp_seq,omitempty"`
	SnortIcmpType      *int64  `protobuf:"varint,17,opt,name=snort_icmp_type,json=snortIcmpType,proto3,oneof" json:"snort_icmp_type,omitempty"`
	SnortIpId          *int64  `protobuf:"varint,18,opt,name=snort_ip_id,json=snortIpId,proto3,oneof" json:"snort_ip_id,omitempty"`
	SnortIpLength      *int64  `protobuf:"varint,19,opt,name=snort_ip_length,json=snortIpLength,proto3,oneof" json:"snort_ip_length,omitempty"`
	SnortMpls          *int64  `protobuf:"varint,20,opt,name=snort_mpls,json=snortMpls,proto3,oneof" json:"snort_mpls,omitempty"`
	SnortPktGen        *string `protobuf:"bytes,21,opt,name=snort_pkt_gen,json=snortPktGen,proto3,oneof" json:"snort_pkt_gen,omitempty"`
	SnortPktLength     *int64  `protobuf:"varint,22,opt,name=snort_pkt_length,json=snortPktLength,proto3,oneof" json:"snort_pkt_length,omitempty"`
	SnortPktNumber     *int64  `protobuf:"varint,23,opt,name=snort_pkt_number,json=snortPktNumber,proto3,oneof" json:"snort_pkt_number,omitempty"`
	SnortServerBytes   *int64  `protobuf:"varint,24,opt,name=snort_server_bytes,json=snortServerBytes,proto3,oneof" json:"snort_server_bytes,omitempty"`
	SnortServerPkts    *int64  `protobuf:"varint,25,opt,name=snort_server_pkts,json=snortServerPkts,proto3,oneof" json:"snort_server_pkts,omitempty"`
	SnortSgt           *int64  `protobuf:"varint,26,opt,name=snort_sgt,json=snortSgt,proto3,oneof" json:"snort_sgt,omitempty"`
	SnortSrcAddress    *string `protobuf:"bytes,27,opt,name=snort_src_address,json=snortSrcAddress,proto3,oneof" json:"snort_src_address,omitempty"`
	SnortSrcPort       *int64  `protobuf:"varint,28,opt,name=snort_src_port,json=snortSrcPort,proto3,oneof" json:"snort_src_port,omitempty"`
	SnortSrcAp         *string `protobuf:"bytes,29,opt,name=snort_src_ap,json=snortSrcAp,proto3,oneof" json:"snort_src_ap,omitempty"`
	SnortTarget        *string `protobuf:"bytes,30,opt,name=snort_target,json=snortTarget,proto3,oneof" json:"snort_target,omitempty"`
	SnortTcpAck        *int64  `protobuf:"varint,31,opt,name=snort_tcp_ack,json=snortTcpAck,proto3,oneof" json:"snort_tcp_ack,omitempty"`
	SnortTcpFlags      *string `protobuf:"bytes,32,opt,name=snort_tcp_flags,json=snortTcpFlags,proto3,oneof" json:"snort_tcp_flags,omitempty"`
	SnortTcpLen        *int64  `protobuf:"varint,33,opt,name=snort_tcp_len,json=snortTcpLen,proto3,oneof" json:"snort_tcp_len,omitempty"`
	SnortTcpSeq        *int64  `protobuf:"varint,34,opt,name=snort_tcp_seq,json=snortTcpSeq,proto3,oneof" json:"snort_tcp_seq,omitempty"`
	SnortTcpWin        *int64  `protobuf:"varint,35,opt,name=snort_tcp_win,json=snortTcpWin,proto3,oneof" json:"snort_tcp_win,omitempty"`
	SnortTimeToLive    *int64  `protobuf:"varint,36,opt,name=snort_time_to_live,json=snortTimeToLive,proto3,oneof" json:"snort_time_to_live,omitempty"`
	SnortUdpLength     *int64  `protobuf:"varint,37,opt,name=snort_udp_length,json=snortUdpLength,proto3,oneof" json:"snort_udp_length,omitempty"`
	SnortVlan          *int64  `protobuf:"varint,38,opt,name=snort_vlan,json=snortVlan,proto3,oneof" json:"snort_vlan,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sensor_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sensor_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_protos_sensor_event_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetSnortTimestamp() string {
	if x != nil {
		return x.SnortTimestamp
	}
	return ""
}

func (x *Metric) GetSnortBase64Data() string {
	if x != nil && x.SnortBase64Data != nil {
		return *x.SnortBase64Data
	}
	return ""
}

func (x *Metric) GetSnortClientBytes() int64 {
	if x != nil && x.SnortClientBytes != nil {
		return *x.SnortClientBytes
	}
	return 0
}

func (x *Metric) GetSnortClientPkts() int64 {
	if x != nil && x.SnortClientPkts != nil {
		return *x.SnortClientPkts
	}
	return 0
}

func (x *Metric) GetSnortDstAddress() string {
	if x != nil && x.SnortDstAddress != nil {
		return *x.SnortDstAddress
	}
	return ""
}

func (x *Metric) GetSnortDstPort() int64 {
	if x != nil && x.SnortDstPort != nil {
		return *x.SnortDstPort
	}
	return 0
}

func (x *Metric) GetSnortDstAp() string {
	if x != nil && x.SnortDstAp != nil {
		return *x.SnortDstAp
	}
	return ""
}

func (x *Metric) GetSnortEthDst() string {
	if x != nil && x.SnortEthDst != nil {
		return *x.SnortEthDst
	}
	return ""
}

func (x *Metric) GetSnortEthLen() int64 {
	if x != nil && x.SnortEthLen != nil {
		return *x.SnortEthLen
	}
	return 0
}

func (x *Metric) GetSnortEthSrc() string {
	if x != nil && x.SnortEthSrc != nil {
		return *x.SnortEthSrc
	}
	return ""
}

func (x *Metric) GetSnortEthType() string {
	if x != nil && x.SnortEthType != nil {
		return *x.SnortEthType
	}
	return ""
}

func (x *Metric) GetSnortFlowstartTime() int64 {
	if x != nil && x.SnortFlowstartTime != nil {
		return *x.SnortFlowstartTime
	}
	return 0
}

func (x *Metric) GetSnortGeneveVni() int64 {
	if x != nil && x.SnortGeneveVni != nil {
		return *x.SnortGeneveVni
	}
	return 0
}

func (x *Metric) GetSnortIcmpCode() int64 {
	if x != nil && x.SnortIcmpCode != nil {
		return *x.SnortIcmpCode
	}
	return 0
}

func (x *Metric) GetSnortIcmpId() int64 {
	if x != nil && x.SnortIcmpId != nil {
		return *x.SnortIcmpId
	}
	return 0
}

func (x *Metric) GetSnortIcmpSeq() int64 {
	if x != nil && x.SnortIcmpSeq != nil {
		return *x.SnortIcmpSeq
	}
	return 0
}

func (x *Metric) GetSnortIcmpType() int64 {
	if x != nil && x.SnortIcmpType != nil {
		return *x.SnortIcmpType
	}
	return 0
}

func (x *Metric) GetSnortIpId() int64 {
	if x != nil && x.SnortIpId != nil {
		return *x.SnortIpId
	}
	return 0
}

func (x *Metric) GetSnortIpLength() int64 {
	if x != nil && x.SnortIpLength != nil {
		return *x.SnortIpLength
	}
	return 0
}

func (x *Metric) GetSnortMpls() int64 {
	if x != nil && x.SnortMpls != nil {
		return *x.SnortMpls
	}
	return 0
}

func (x *Metric) GetSnortPktGen() string {
	if x != nil && x.SnortPktGen != nil {
		return *x.SnortPktGen
	}
	return ""
}

func (x *Metric) GetSnortPktLength() int64 {
	if x != nil && x.SnortPktLength != nil {
		return *x.SnortPktLength
	}
	return 0
}

func (x *Metric) GetSnortPktNumber() int64 {
	if x != nil && x.SnortPktNumber != nil {
		return *x.SnortPktNumber
	}
	return 0
}

func (x *Metric) GetSnortServerBytes() int64 {
	if x != nil && x.SnortServerBytes != nil {
		return *x.SnortServerBytes
	}
	return 0
}

func (x *Metric) GetSnortServerPkts() int64 {
	if x != nil && x.SnortServerPkts != nil {
		return *x.SnortServerPkts
	}
	return 0
}

func (x *Metric) GetSnortSgt() int64 {
	if x != nil && x.SnortSgt != nil {
		return *x.SnortSgt
	}
	return 0
}

func (x *Metric) GetSnortSrcAddress() string {
	if x != nil && x.SnortSrcAddress != nil {
		return *x.SnortSrcAddress
	}
	return ""
}

func (x *Metric) GetSnortSrcPort() int64 {
	if x != nil && x.SnortSrcPort != nil {
		return *x.SnortSrcPort
	}
	return 0
}

func (x *Metric) GetSnortSrcAp() string {
	if x != nil && x.SnortSrcAp != nil {
		return *x.SnortSrcAp
	}
	return ""
}

func (x *Metric) GetSnortTarget() string {
	if x != nil && x.SnortTarget != nil {
		return *x.SnortTarget
	}
	return ""
}

func (x *Metric) GetSnortTcpAck() int64 {
	if x != nil && x.SnortTcpAck != nil {
		return *x.SnortTcpAck
	}
	return 0
}

func (x *Metric) GetSnortTcpFlags() string {
	if x != nil && x.SnortTcpFlags != nil {
		return *x.SnortTcpFlags
	}
	return ""
}

func (x *Metric) GetSnortTcpLen() int64 {
	if x != nil && x.SnortTcpLen != nil {
		return *x.SnortTcpLen
	}
	return 0
}

func (x *Metric) GetSnortTcpSeq() int64 {
	if x != nil && x.SnortTcpSeq != nil {
		return *x.SnortTcpSeq
	}
	return 0
}

func (x *Metric) GetSnortTcpWin() int64 {
	if x != nil && x.SnortTcpWin != nil {
		return *x.SnortTcpWin
	}
	return 0
}

func (x *Metric) GetSnortTimeToLive() int64 {
	if x != nil && x.SnortTimeToLive != nil {
		return *x.SnortTimeToLive
	}
	return 0
}

func (x *Metric) GetSnortUdpLength() int64 {
	if x != nil && x.SnortUdpLength != nil {
		return *x.SnortUdpLength
	}
	return 0
}

func (x *Metric) GetSnortVlan() int64 {
	if x != nil && x.SnortVlan != nil {
		return *x.SnortVlan
	}
	return 0
}

type SensorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics             []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	EventHashSha256     string    `protobuf:"bytes,2,opt,name=event_hash_sha256,json=eventHashSha256,proto3" json:"event_hash_sha256,omitempty"`
	EventMetricsCount   int64     `protobuf:"varint,3,opt,name=event_metrics_count,json=eventMetricsCount,proto3" json:"event_metrics_count,omitempty"`
	EventSeconds        int64     `protobuf:"varint,4,opt,name=event_seconds,json=eventSeconds,proto3" json:"event_seconds,omitempty"`
	SensorId            string    `protobuf:"bytes,5,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	SensorVersion       string    `protobuf:"bytes,6,opt,name=sensor_version,json=sensorVersion,proto3" json:"sensor_version,omitempty"`
	EventReadAt         int64     `protobuf:"varint,7,opt,name=event_read_at,json=eventReadAt,proto3" json:"event_read_at,omitempty"`
	EventSentAt         int64     `protobuf:"varint,8,opt,name=event_sent_at,json=eventSentAt,proto3" json:"event_sent_at,omitempty"`
	EventReceivedAt     int64     `protobuf:"varint,9,opt,name=event_received_at,json=eventReceivedAt,proto3" json:"event_received_at,omitempty"`
	SnortAction         *string   `protobuf:"bytes,10,opt,name=snort_action,json=snortAction,proto3,oneof" json:"snort_action,omitempty"`
	SnortClassification *string   `protobuf:"bytes,11,opt,name=snort_classification,json=snortClassification,proto3,oneof" json:"snort_classification,omitempty"`
	SnortDirection      *string   `protobuf:"bytes,12,opt,name=snort_direction,json=snortDirection,proto3,oneof" json:"snort_direction,omitempty"`
	SnortInterface      string    `protobuf:"bytes,13,opt,name=snort_interface,json=snortInterface,proto3" json:"snort_interface,omitempty"`
	SnortMessage        string    `protobuf:"bytes,14,opt,name=snort_message,json=snortMessage,proto3" json:"snort_message,omitempty"`
	SnortPriority       int64     `protobuf:"varint,15,opt,name=snort_priority,json=snortPriority,proto3" json:"snort_priority,omitempty"`
	SnortProtocol       string    `protobuf:"bytes,16,opt,name=snort_protocol,json=snortProtocol,proto3" json:"snort_protocol,omitempty"`
	SnortRuleGid        int64     `protobuf:"varint,17,opt,name=snort_rule_gid,json=snortRuleGid,proto3" json:"snort_rule_gid,omitempty"`
	SnortRuleRev        int64     `protobuf:"varint,18,opt,name=snort_rule_rev,json=snortRuleRev,proto3" json:"snort_rule_rev,omitempty"`
	SnortRuleSid        int64     `protobuf:"varint,19,opt,name=snort_rule_sid,json=snortRuleSid,proto3" json:"snort_rule_sid,omitempty"`
	SnortRule           string    `protobuf:"bytes,20,opt,name=snort_rule,json=snortRule,proto3" json:"snort_rule,omitempty"`
	SnortSeconds        int64     `protobuf:"varint,21,opt,name=snort_seconds,json=snortSeconds,proto3" json:"snort_seconds,omitempty"`
	SnortService        *string   `protobuf:"bytes,22,opt,name=snort_service,json=snortService,proto3,oneof" json:"snort_service,omitempty"`
	SnortTypeOfService  *int64    `protobuf:"varint,23,opt,name=snort_type_of_service,json=snortTypeOfService,proto3,oneof" json:"snort_type_of_service,omitempty"`
}

func (x *SensorEvent) Reset() {
	*x = SensorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sensor_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorEvent) ProtoMessage() {}

func (x *SensorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sensor_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorEvent.ProtoReflect.Descriptor instead.
func (*SensorEvent) Descriptor() ([]byte, []int) {
	return file_protos_sensor_event_proto_rawDescGZIP(), []int{1}
}

func (x *SensorEvent) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SensorEvent) GetEventHashSha256() string {
	if x != nil {
		return x.EventHashSha256
	}
	return ""
}

func (x *SensorEvent) GetEventMetricsCount() int64 {
	if x != nil {
		return x.EventMetricsCount
	}
	return 0
}

func (x *SensorEvent) GetEventSeconds() int64 {
	if x != nil {
		return x.EventSeconds
	}
	return 0
}

func (x *SensorEvent) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorEvent) GetSensorVersion() string {
	if x != nil {
		return x.SensorVersion
	}
	return ""
}

func (x *SensorEvent) GetEventReadAt() int64 {
	if x != nil {
		return x.EventReadAt
	}
	return 0
}

func (x *SensorEvent) GetEventSentAt() int64 {
	if x != nil {
		return x.EventSentAt
	}
	return 0
}

func (x *SensorEvent) GetEventReceivedAt() int64 {
	if x != nil {
		return x.EventReceivedAt
	}
	return 0
}

func (x *SensorEvent) GetSnortAction() string {
	if x != nil && x.SnortAction != nil {
		return *x.SnortAction
	}
	return ""
}

func (x *SensorEvent) GetSnortClassification() string {
	if x != nil && x.SnortClassification != nil {
		return *x.SnortClassification
	}
	return ""
}

func (x *SensorEvent) GetSnortDirection() string {
	if x != nil && x.SnortDirection != nil {
		return *x.SnortDirection
	}
	return ""
}

func (x *SensorEvent) GetSnortInterface() string {
	if x != nil {
		return x.SnortInterface
	}
	return ""
}

func (x *SensorEvent) GetSnortMessage() string {
	if x != nil {
		return x.SnortMessage
	}
	return ""
}

func (x *SensorEvent) GetSnortPriority() int64 {
	if x != nil {
		return x.SnortPriority
	}
	return 0
}

func (x *SensorEvent) GetSnortProtocol() string {
	if x != nil {
		return x.SnortProtocol
	}
	return ""
}

func (x *SensorEvent) GetSnortRuleGid() int64 {
	if x != nil {
		return x.SnortRuleGid
	}
	return 0
}

func (x *SensorEvent) GetSnortRuleRev() int64 {
	if x != nil {
		return x.SnortRuleRev
	}
	return 0
}

func (x *SensorEvent) GetSnortRuleSid() int64 {
	if x != nil {
		return x.SnortRuleSid
	}
	return 0
}

func (x *SensorEvent) GetSnortRule() string {
	if x != nil {
		return x.SnortRule
	}
	return ""
}

func (x *SensorEvent) GetSnortSeconds() int64 {
	if x != nil {
		return x.SnortSeconds
	}
	return 0
}

func (x *SensorEvent) GetSnortService() string {
	if x != nil && x.SnortService != nil {
		return *x.SnortService
	}
	return ""
}

func (x *SensorEvent) GetSnortTypeOfService() int64 {
	if x != nil && x.SnortTypeOfService != nil {
		return *x.SnortTypeOfService
	}
	return 0
}

type AlertSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAlerts int32 `protobuf:"varint,1,opt,name=total_alerts,json=totalAlerts,proto3" json:"total_alerts,omitempty"`
}

func (x *AlertSummary) Reset() {
	*x = AlertSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sensor_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSummary) ProtoMessage() {}

func (x *AlertSummary) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sensor_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSummary.ProtoReflect.Descriptor instead.
func (*AlertSummary) Descriptor() ([]byte, []int) {
	return file_protos_sensor_event_proto_rawDescGZIP(), []int{2}
}

func (x *AlertSummary) GetTotalAlerts() int32 {
	if x != nil {
		return x.TotalAlerts
	}
	return 0
}

var File_protos_sensor_event_proto protoreflect.FileDescriptor

var file_protos_sensor_event_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x12, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x10, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6b,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x44, 0x73, 0x74, 0x41, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x45, 0x74, 0x68, 0x44, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x45, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x45, 0x74, 0x68, 0x53, 0x72, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x12,
	0x73, 0x6e, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x76, 0x65, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0b, 0x52, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x56, 0x6e,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52,
	0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x49, 0x63, 0x6d, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0e, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x49, 0x63, 0x6d, 0x70, 0x53,
	0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f,
	0x52, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x49, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x11, 0x52, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x49, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x4d, 0x70, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x50, 0x6b, 0x74, 0x47, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x0e, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x50, 0x6b, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52, 0x0e, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x50, 0x6b, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x16, 0x52, 0x10, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x17, 0x52,
	0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6b, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x67, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x18, 0x52, 0x08, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x53,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1a,
	0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61,
	0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0a, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x53, 0x72, 0x63, 0x41, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c,
	0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63,
	0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x54, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x6e, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x63, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1f, 0x52,
	0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x63, 0x70, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x20, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54,
	0x63, 0x70, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x21, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x48, 0x22, 0x52,
	0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x48, 0x23, 0x52,
	0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x48, 0x24, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x64, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x5f, 0x76, 0x6e, 0x69, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x73, 0x65, 0x71, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x67,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x6e, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x22, 0x98, 0x08, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x73, 0x6e,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x47,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6e, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15,
	0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x12, 0x73,
	0x6e, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6e, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x31,
	0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x32, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_sensor_event_proto_rawDescOnce sync.Once
	file_protos_sensor_event_proto_rawDescData = file_protos_sensor_event_proto_rawDesc
)

func file_protos_sensor_event_proto_rawDescGZIP() []byte {
	file_protos_sensor_event_proto_rawDescOnce.Do(func() {
		file_protos_sensor_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_sensor_event_proto_rawDescData)
	})
	return file_protos_sensor_event_proto_rawDescData
}

var file_protos_sensor_event_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_sensor_event_proto_goTypes = []interface{}{
	(*Metric)(nil),        // 0: pb.Metric
	(*SensorEvent)(nil),   // 1: pb.SensorEvent
	(*AlertSummary)(nil),  // 2: pb.AlertSummary
	(*emptypb.Empty)(nil), // 3: google.protobuf.Empty
}
var file_protos_sensor_event_proto_depIdxs = []int32{
	0, // 0: pb.SensorEvent.metrics:type_name -> pb.Metric
	1, // 1: pb.SensorService.StreamData:input_type -> pb.SensorEvent
	3, // 2: pb.SensorService.StreamData:output_type -> google.protobuf.Empty
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protos_sensor_event_proto_init() }
func file_protos_sensor_event_proto_init() {
	if File_protos_sensor_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_sensor_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sensor_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sensor_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_sensor_event_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_sensor_event_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_sensor_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_sensor_event_proto_goTypes,
		DependencyIndexes: file_protos_sensor_event_proto_depIdxs,
		MessageInfos:      file_protos_sensor_event_proto_msgTypes,
	}.Build()
	File_protos_sensor_event_proto = out.File
	file_protos_sensor_event_proto_rawDesc = nil
	file_protos_sensor_event_proto_goTypes = nil
	file_protos_sensor_event_proto_depIdxs = nil
}
