package types

type Metadata struct {
	// SensorID: Sensor ID.
	SensorID string `json:"sensor_id"`

	// SensorVersion: Sensor version.
	SensorVersion string `json:"sensor_version"`

	// SentAt: Time the event was sent.
	// Only used for testing purposes.
	SentAt int64 `json:"sent_at"`

	// HashSHA256: SHA-256 hash of the event.
	HashSHA256 string `json:"hash_sha256"`

	// ReadAt: Time the event was read.
	// Only used for testing purposes.
	ReadAt int64 `json:"read_at"`

	// ReceivedAt: Time the event was received.
	// Only used for testing purposes.
	ReceivedAt int64 `json:"received_at"`
}

// SnortAlert represents an alert generated by Snort.
type SnortAlert struct {
	Metadata Metadata `json:"metadata"`

	// Action: Describes the action taken by Snort for the observed event. Example values can include "allow", "alert", "drop", etc.
	Action *string `json:"action"`

	// Base64Data: Base64-encoded payload data associated with the event.
	Base64Data *string `json:"b64_data"`

	// Classification: Describes the class or category of the event. Example values can include "none", "exploit", "web-application-attack", etc.
	Classification *string `json:"class"`

	// ClientBytes: Number of bytes sent by the client.
	ClientBytes *int64 `json:"client_bytes"`

	// ClientPkts: Number of packets sent by the client.
	ClientPkts *int64 `json:"client_pkts"`

	// Direction: Direction of the event. Example values can include "C2S" (client-to-server) or "S2C" (server-to-client).
	Direction *string `json:"dir"`

	// DstAddr: Destination IP address.
	DstAddr *string `json:"dst_addr"`

	// DstAp: Destination IP address and port combination.
	DstAp *string `json:"dst_ap"`

	// DstPort: Destination port number.
	DstPort *int64 `json:"dst_port"`

	// EthDst: Destination MAC address in Ethernet frame.
	EthDst *string `json:"eth_dst"`

	// EthLen: Length of the Ethernet frame.
	EthLen *int64 `json:"eth_len"`

	// EthSrc: Source MAC address in Ethernet frame.
	EthSrc *string `json:"eth_src"`

	// EthType: Type of the Ethernet frame, typically indicating the encapsulated protocol (e.g., IPv4, IPv6).
	EthType *string `json:"eth_type"`

	// FlowStartTime: Start time of the flow.
	FlowStartTime *int64 `json:"flowstart_time"`

	// GeneveVNI: Virtual Network Identifier (VNI) for the Generic Network Virtualization Encapsulation (GENEVE) protocol.
	GeneveVNI *int64 `json:"geneve_vni"`

	// GID: Generator ID, identifying the source of the alert rule.
	GID int64 `json:"gid"`

	// ICMPCode: ICMP code for ICMP packets.
	ICMPCode *int64 `json:"icmp_code"`

	// ICMPID: ICMP identifier for ICMP packets.
	ICMPID *int64 `json:"icmp_id"`

	// ICMPSeq: ICMP sequence number for ICMP packets.
	ICMPSeq *int64 `json:"icmp_seq"`

	// ICMPType: ICMP type for ICMP packets.
	ICMPType *int64 `json:"icmp_type"`

	// Interface: Network interface on which the event occurred.
	Interface string `json:"iface"`

	// IPID: IP identification field in IP header.
	IPID *int64 `json:"ip_id"`

	// IPLen: Total length of the IP packet.
	IPLen *int64 `json:"ip_len"`

	// MPLS: Multi-Protocol Label Switching (MPLS) label stack information.
	MPLS *int64 `json:"mpls"`

	// Message: Message associated with the event.
	Message string `json:"msg"`

	// PktGen: Packet generator type, such as "raw".
	PktGen *string `json:"pkt_gen"`

	// PktLen: Length of the packet.
	PktLen *int64 `json:"pkt_len"`

	// PktNum: Packet number.
	PktNum *int64 `json:"pkt_num"`

	// Priority: Priority of the event.
	Priority int64 `json:"priority"`

	// Protocol: Protocol of the event.
	Protocol string `json:"proto"`

	// Revision: Revision number of the rule.
	Revision int64 `json:"rev"`

	// Rule: Rule ID or signature ID triggered by the event.
	RuleID string `json:"rule"`

	// Seconds: Time of the event in seconds since the epoch.
	Seconds int64 `json:"seconds"`

	// ServerBytes: Number of bytes sent by the server.
	ServerBytes *int64 `json:"server_bytes"`

	// ServerPkts: Number of packets sent by the server.
	ServerPkts *int64 `json:"server_pkts"`

	// Service: Service associated with the event.
	Service *string `json:"service"`

	// SGT: Security Group Tag (SGT) associated with the event.
	SGT *int64 `json:"sgt"`

	// SID: Snort rule ID or signature ID triggered by the event.
	SID int64 `json:"sid"`

	// SrcAddr: Source IP address.
	SrcAddr *string `json:"src_addr"`

	// SrcAp: Source IP address and port combination.
	SrcAp *string `json:"src_ap"`

	// SrcPort: Source port number.
	SrcPort *int64 `json:"src_port"`

	// Target: Target address or entity of the event.
	Target *string `json:"target"`

	// TCPAck: TCP acknowledgment number.
	TCPAck *int64 `json:"tcp_ack"`

	// TCPFlags: TCP flags set in the TCP header.
	TCPFlags *string `json:"tcp_flags"`

	// TCPLen: Length of the TCP packet.
	TCPLen *int64 `json:"tcp_len"`

	// TCPSeq: TCP sequence number.
	TCPSeq *int64 `json:"tcp_seq"`

	// TCPWin: TCP window size.
	TCPWin *int64 `json:"tcp_win"`

	// Timestamp: Time of the event in human-readable format.
	Timestamp string `json:"timestamp"`

	// TOS: Type of Service (ToS) field in IP header.
	TOS *int64 `json:"tos"`

	// TTL: Time to Live (TTL) field in IP header.
	TTL *int64 `json:"ttl"`

	// UDPLen: Length of the UDP packet.
	UDPLen *int64 `json:"udp_len"`

	// VLAN: VLAN ID associated with the event.
	VLAN *int64 `json:"vlan"`
}
